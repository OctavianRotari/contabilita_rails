continue
continur
continua
Payment.all
continue
page.body
page
continue
quit
invoice
continue
invoice_params
continue
invoice_params
continue
invoice_params
continue
invoice_params
continue
at_the_expense_of(invoice_params)
continue
at_the_expense_of
continue
@passive_invoice
quit
fg
Invoice.all
@passive_invoice
Invoice.all
continue
@company.errors.messages.each do |name, errors| puts name end
@company.errors.messages.each do |name, errors| puts errors end
@company.errors.messages.each do |name, errors| puts errors name end
error_message[0]
error_message[1]
error_message
@company.errors.messages.each do |name, errors| puts errors end
continue
@company.errors.messages.each do |name, errors| puts errors end
@company.errors.messages.each do |errors| puts errors end
@company.errors.messages.each
@company.errors.messages[0].each
@company.errors.messages.each
@company.errors.messages[:name]
@company.errors.messages
@company.errors
continue
@category.errors.messages[:category][0]
@category.errors.messages[:category][1]
@category.errors.messages[:category]
@category.errors.messages
@category.errors.full_messages
@category.errors.messages[:category]
@category.errors.messages
@category.errors[1]
@category.errors
errors
error_message
error_messages
continue
Invoice.count > 0
Invoice.count
continue
Invoice[A.count
Invoice.count
continue
@company_dashboard.company
@company_dashboard.active_invoices
@company_dashboard.passive_invoices
@company_dashboard
continue
@company_dashboard.passive_invoices
@company_dashboard
@company_dashboard.passive_invoices
@company_dashboard
@company_dashboard.passive_invoices
continue
@company_dashboard.passive_invoices
@company_dashboard.company_inovices
@company_dashboard.inovices
@company_dashboard
continue
company_dashboard.passive_invoices
company_dashboard
passive_invoices
company_dashboard
continue
@invoices
@invoice
continue
Thread.current[:user] - user
Thread.current[:user]
Thread.current[:user
current_user
continue
company_id
continue
company_id
ccompany_id
continue
current_user.companies
current_user
quit
current_user[:id]
current_user
@vehicle[:user_id]
@vehicle
continue
@params
params
continue
contiue
category.companies
category.company
category
continue
Vehicle.where(type_of_vehicle: 'Trattore' || 'trattore').count
Vehicle.allVehicle.where(type_of_vehicle: 'Trattore' || 'trattore').count
Vehicle.all
continue
content_tag(:h4, notice ) || content_tag(:h4, flash[:success] )
content_tag(:h4, notice )
content_tag(:h4, flash[:success] )
content_tag(:h4, flash[:success] ) || content_tag(:h4, flash[:notice])
notice.empty?
flash[:notice].empty?
flash[:notice].empty>
flash[:notice].exists?
notice?
notice ?
if notice
notice
flash
continue
fg
if Vehicle.all.empty return true
if Vehicle.all.empty 
Vehicle.all.count
Vehicle.all
Vehicle
Vehicles
record.vehicles
record
continue
conitnnue
continue
content_tag(:h4, flash[:error])
flash
continue
flash
continue
flash
continue
flash
continue
if flash return true end
if flash 
if flash true end
flash
if notice true '\n' 
if notice true '\n' end
if notice true \n end
if notice \n true \n end
if notice.exists? true end
if notice return true end;
if notice return true end
if notice true end
notice? true : false
if.notice
notice
continue
@invoice.type_of_invoice
@invoice
payments
payment
invoice
invoices
continue
Vehicle.count
continue
Invoice.all
Invoices.all
continue
@invoice_params[:vehicle_id].empty?
@invoice_params[:vehicle_id]
@invoice_params[:vehicle_id
continue
continur
params.integer?
params = 2
m = 2
@invoice_params
@param
param
@params
quit
continu
current_url
page.body
continue
quit
continue
page.body
quit
fg
page.body
continue
page.body
quit
page.body
current_url
quit
current_url
page.body
quit
page.body
quit
fg
page.body
continue
page.body
continue
Invoice.all
continue
vehicle.passive_invoices
continue
vehicle.invoices.active
vehicle.invoices
vehicle.passive_invoices
continue
vehicle.passive_invoices
vehicle.invoices.passive
continue
vehicle.invoices.passive
vehicle.invoices.active
vehicle.passive_invoi
vehicle.invoices
vehicle
continuevehicle
continue
vehicle.invoices(1)
vehicle.passive_invoices
vehicle.invoices
vehicle.invocies
vehicle
continue
continu
Company.find(1)
Company.all
continue
continu
continue
Invoice.last
continue
conitnue
continue
