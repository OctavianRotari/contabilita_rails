continue
total
Class
invoices
continue
@invoices
invoices
companies
companyas
@company
company
continue
@invoice
@invoices
@company
company
invoice
invoices
continue
fg
invoice.payments
invoice.paymetns
invoice =  invoices.first
continue
conitnue
continue
fg
continue
invoice.payments
invoice.payment
invoice.payments
invoice.paid
invoice =  invoices.first
invoices.first
invoices
quit
fg
page.body
continue
invoice.vehicle.plate
invoice
continue
page.body
quit
page.body
continue
page.body
continue
invoice.vehicle
invoice.vehivle
invoice
page.body
quit
page.body
Payment.all
invoice
fg
Vehicle.all
quit
invoice.vehicle.plate
invoice.vehicle.name
invoice.vehicle
invoice
invoic
continue
quit
invoice.vehicle
invoince
invoince.vehicle
company
invoice
page.body
continue
invoice.vehicle.plate
invoice.vehicle
invoice = Invoice.last
Invoice.last.company.plate
Company.all
Vehicle.all
Invoice.all
continue
invoice
invoice.parse(hash)
invoice.last
invoice
quit
fquit
Invoice.all
continue
vehicle
continue
vehicle
quit
company.create.invoices
company
continue
@invoice
continue
page.body
continue
invoice_params_builded
invoice_params
params.require(:invoice).permit(:reason,:taxable_1,:vat_1,:taxable_2,:vat_2,:taxable_3,:vat_3,:date_of_issue,:plate,:deadline)
invoice_params
invoice_paras
invoice
invoice_params
params.require(:invoice).permit(:reason,:taxable_1,:vat_1,:taxable_2,:vat_2,:taxable_3,:vat_3,:date_of_issue,:plate,:deadline)
params[:invoice]
params
invoice_params
continue
@invoice_params
continue
vat
params
quit
continue
total_taxable
quit
total_taxable
continue
continue]
continue
total
continue
params_for_payment[:paid].empty?
params_for_payment[:paid]
params_for_payment.paid
params_for_payment
continue
params = params.require(:invoice).permit(:paid,:payment_date,:method_of_payment)
params.paid
params
continue
page.body
continue
page.body
page.body.href
page.body.a
page.body.find(css:'Bezzi')
continue
page.body
continue
page.body
continue
Company.all
page.body
continue
Company.all
continue
company('Bezzi')
continue
company('Bezzi')
company
continue
invoice_params.require(:invoice).permit(:paid)
quit
invoice_params
continue
company.id
invoice.id
invoice_params
continue
invoice.id
invoice.payments.build({total:'100', method_of_payment:'cassa', date:'05/03/15'}).save
invoice.payments.build({total:'100', method_of_payment:'cassa', date:'05/03/15'})
invoice.payments.build({total:100, method_of_payment:'cassa', date:'05/03/15'})
invoice =  Invoice.find(2)
Invoice.find(2)
Invoice.last
id
invoice_id
invoice_new.save
invoice_id
Invoice.payments.build({total:100, method_of_payment:'cassa', date:'05/03/15'})
Invoice.payments
invoice
invoice_params
Invoice.payments.build({total:100, method_of_payment:'cassa', date:'05/03/15'})
Invoice.payments.build({total:100, method_of_payment:'cassa, date:'05/03/15})
continue
@invoice_params
continue
@invoice_params
continue
@invoice_params
continue
@invoice_params
continue
@invoice_params
continue
@invoice_params
continue
@invoice_params
continue
@invoice_params
continue
@invoice_params
continue
total_taxable
continue
@taxable
total_taxable
continue
@taxable
@taxable.total_taxable
@taxable.new @invoice_params
@taxable.new
@taxable
@invoice_params
total_taxable
totak_taxable
continue
fg
total_taxable
continue
@invoice_params
total_vat
continue
total_vat
continue
total_vat
continue
total_vat
continue
total_vat
continue
total_vat
continue
total_vat
continue
build_invoice_1
continue
build_invoice_1
quit
build_invoice_1
continue
invoice_params_2
build_invoice_2
continue
build_invoice_2
continue
build_invoice_2.vat
build_invoice_2
continue
invoice_params_1.has_key?(:vat_1)
invoice_params_1.has_key?("vat_1")
continue
build_invoice_1.vat
build_invoice_1
continue
build_invoice_1
build_invoice
continue
continu
