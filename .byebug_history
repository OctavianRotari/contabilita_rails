continue
Time.new(params[:year], params[:month])
params
time
continue
tickets_dashboard.administrative
tickets_dashboard
continue
@tickets
continue
administrative_tickets.month(date)
date = month_params
administrative_tickets.month(date)
month_params
continue
quit
administrative_tickets.month(date)
date = month_params
month_params
date
self
seld
continue
@tickets
Ticket.all.administrative
Ticket.all
continue
Ticket.all
Ticket
continue
quit
date.month
date=  params[:date]
date params[:date]
params[:date]
params
continue
record.vehicle_field { |field| field.vehicle.first.plate }
record.vehicle_field { |field| field.vehicle.plate }
record.vehicle_field { |field| field.vehicle }
record.vehicle_field { |field| field.vehicle.plate }
continue
record.vehicle_field.each {|field| field.vehicles}
record.vehicle_field.each {|field| field.vehicle}
record.vehicle_field.each {|field| field}
record.vehicle_field.each {|field| field.vehicle}
record.vehicle_field
record
fg
quit
Category.first.insurances.total_all.to_i
Category.first.insurances.total_all
Category.first.insurances.total
Category.first.insurances
Category.first
Insurance.all
continue
quit
Insurance.all
continue
conitnue
Company.find(company_id).category_id
return nil if company_id.nil?
continue
conitnue
reload
company_id
company_id.nil?
company_id.nil
company_id = nil
company_id
continue
Insurance.where('date_of_issue >= ? and date_of_issue <= ?', year.beginning_of_year, year.end_of_year)
year = Date.new(year)
year = year.to_i
Insurance.where('date_of_issue >= ? and date_of_issue <= ?', year.beginning_of_year, year.end_of_year)
year
continue
quit
date
invoices
continue
true if vehicle.insurances.active
if vehicle.insurances.active true 
if vehicle.insurances.active true end
vehicle.insurances.active
vehicle.insurance.active
vehicle = company.vehicles_insured.first
company.vehicles_insured.first
company.vehicles_insured
company.vehicle_insured
quit
Invoice.month_passive_total
Invoice.month_passive
passive_invoice
Invoice.month_passive
quit
continue
params
quit
Insurance.all
Insurance.general_insuranses_total(self.user_id).to_i
Insurance.general_insuranses_total(self.user_id)
self.user_id
Insurance.general_insuranses.total(self.user_id)
Insurance.general_insuranses.total
Insurances.general_insuranses.total
Insurances.general_insurances.total
self
insurances.to_i
insurances
continue
quit
Insurance.general_insurances
Insurance.all.general_insurances
Insurance.all.general_insurance
Insurance.all
vehicle
quit
vehicle.general_insurance_month
vehicle.general_insurances_month
vehicle
continue
quit
self
vehicle_field.month
vehicle_field
continue
self.vehicle_field
self.vehicle.field
self
continue
self.user_id
self
continue
@vehicle.insurances.active
continue
@vehicle.insurances.active
@vehicle.insurances
continue
year_params
year_paraams
date
company_fuel_receipts
continue
@fuel_receipts_dashboard.company_fuel_receipts_ord
@fuel_receipts_dashboard
continue
FuelReceipt.first.company.name
FuelReceipt.first
FuelReceipt.all
FuelReceipt
fuel_receipts
:q
continue
fg
fuel_receipts
fg
continue
invoices.month_general_expences
Invoices.month_general_expences
invoices.month_general_expences
invoices.year_general_expences
continue
invoices.year_general_expences
continue
invoices.year_general_expences
continue
invoices.year_general_expences
continue
invoices.year_general_expences
invoices.month_general_expences
continue
invoices
continue
Invoice.month_active(month).total_all.to_i
Invoice.month_active(month).total_all
Invoice.month_active(month)
Invoice.month_passive(month)
month
continue
Invoice.where(date_of_issue: Time.now.month)
Invoice.all.select("count(id), date_trunc('month', date_of_issue) as month").where(date_of_issue: Time.now.month)
Invoice.all.select("count(id), date_trunc('month', date_of_issue) as month").where(date_of_issue: Time.now)
Invoice.all.select("count(id), date_trunc('month', date_of_issue) as month").where("month")
Invoice.all.select("count(id), date_trunc('month', date_of_issue) as month").where("month"  11)
Invoice.all.select("count(id), date_trunc('month', date_of_issue) as month").where("month" = 11)
Invoice.all.select("count(id), date_trunc('month', date_of_issue) as month").group('month')
Invoice.all
Invoice.select("count(id), date_trunc('month', date_of_issue) as month").group('month')
Invoice.select('count(id), date_trunc('month', date_of_issue) as month')
Invoice.select('count(id), date_trunc('month', date_of_issue) as month').group('month')
Invoice.select('count(id), date_trunc('month', created_at) as month').group('month')
Invoice.select('count(id), date_trunc('month', created_at) as month')
invoices.each{|month, invoices| invoices.total_all}
invoices.each{|month, invoices| puts invoices}
invoices.each{|month, invoices| invoices}
invoices
invoice
continue
conitnue
Invoie.group_by_period(:month, :date_of_issue)
Invoie.group_by_period
Invoice.group_by_month(:created_at => Time.now)
Invoice.group_by_month(created_at: Time.now)
Invoice.group_by_month(created_at: 11)
Invoice.group_by_month(created_at: "11")
Invoice.group_by_month(created_at: "month")
Invoice.group_by_month("created_at invoices.id")
Invoice.group_by_month(:created_at, "invoices.id")
Invoice.group_by_month(:created_at, :invoices.id)
Invoice.group_by_month(:created_at, :invoice.id)
Invoice.group_by_month(:created_at)
Invoice.group_by_month(:created_at).count
Invoice.group_by_month(:created_at, :id)
Invoice.group_by_month(:created_at)
Invoice.group_by_month(:create_at)
Invoice.group_by_month(:date_of_issue)
Invoice.all
quit
Invoice.all.group_by{|t| t.date_of_issue.beginning_of_month }.each{|month, invoice| invoices }
Invoice.all.group_by{|t| t.date_of_issue.beginning_of_month }.each{|invoice| invoices }
Invoice.all.group_by{|t| t.date_of_issue.beginning_of_month }
Invoice.all.group_by{|t| t.month }
Invoice.group_by{|t| t.month}
Invoice.all(:group => 'date(created_at)' )
Invoice.all(:group=> 'date(created_at)' )
Invoice.all(group: 'date(created_at)')
Invoice.all
Date -= 1.month
Date.today -= 1.month
Date.today
Date.now
Time.zone.now -= 1.month
Time.zone.now-1.month
Time.zone.now.month - 1.month
Time.zone.now.month -= 1.month
Time.zone.now.month -= 1
Time.zone.now.month
Date.new(params[:month].to_i)
Date.new(params[:month])
params[:month]
params
fg
continue
company_fuel_receipts
company_fuel_receipts.current_month
current_user_companies.gas_stations
continue
self
invoices
invoice
continue
invoices
continue
invoices
